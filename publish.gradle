// changelog.gradle
apply from: 'https://git.io/JqJiC'

distributions.main.contents {
    it.from ('README.md', 'LICENSE.txt', 'CHANGELOG.md')
    // version.txt is used by version command
    it.from(projectDir) {
        it.include 'version.txt'
    }
    it.exclude {
        File file = it.file
        String filename = file.getName()
        /*
         * there is a bug that occurs when running distribution tasks on Github CI
         * where the distribution archive tries to add itself to archive
         * @see https://github.com/cocolabs/pz-zdoc/issues/21
         */
        if (filename.startsWith(archivesBaseName) && filename.endsWithAny('.zip', '.tar')) {
            return true
        }
        if (!CI) {
            // exclude Project Zomboid classes
            if (file.toPath().startsWith(zomboidClassesDir.toPath())) {
                return true
            }
            // exclude Project Zomboid libraries
            if (file.toPath().startsWith(gameDir)) {
                return true
            }
        }
        return false
    }
}
// generate changelog BEFORE creating distribution
[ 'assemble', 'assembleDist', 'installDist' ].forEach({
    tasks.named(it).configure({it.dependsOn('generateChangelog')})
})
// run distribution archive tasks AFTER generating changelog
[ 'distTar', 'distZip' ].forEach({
    tasks.named(it).configure({it.mustRunAfter('generateChangelog')})
})
def cleanScripts = tasks.register('cleanScripts', Delete.class) {
    it.description('Delete build scripts directory.')
    it.group('zomboid')
    it.delete("$buildDir/scripts")
}
tasks.named('installDist').configure{
    it.dependsOn(cleanScripts)
}

tasks.named('startScripts').configure {
    it.setWindowsStartScriptGenerator(new ZWindowsStartScriptGenerator())
    it.setUnixStartScriptGenerator(new ZUnixStartScriptGenerator())

    // do not add provided files to classpath, they are not included in distribution
    it.classpath -= configurations.zomboidImplementation
}

// include version information in jar
jar.from 'version.txt'

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'ZomboidDoc'
                description = 'ZomboidDoc is a Lua library compiler for Project Zomboid.'
                url = 'https://github.com/cocolabs/pz-zdoc'
                scm {
                    connection = 'scm:git:git://github.com/cocolabs/pz-zdoc.git'
                    developerConnection = 'scm:git:ssh://github.com:cocolabs/pz-zdoc.git'
                    url = 'https://github.com/cocolabs/pz-zdoc'
                }
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'yooks'
                        name = 'Matthew Cain'
                        email = 'yooksi@zoho.com'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

task publishToSonatypeAndCloseStagingRepository {
    description 'Publish all publications to Nexus and close staging repository.'
    group 'publishing'
    dependsOn = [ 'publishToSonatype', 'closeSonatypeStagingRepository' ]
}
