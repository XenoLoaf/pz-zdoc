# Continuous delivery
name: Java CD

on:
  push:
    branches:
      - 'release/**'        # Release branches
      - 'workflow/**'       # Workflow branch
      - master              # Main project branch
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
    env:
      OS: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Setup Python
        if: env.OS == 'ubuntu-latest'
        uses: actions/setup-python@master
        with:
          python-version: 3.7
      - name: Setup Ruby
        if: env.OS == 'ubuntu-latest'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
          bundler-cache: true
      - name: Assemble classes
        run: ./gradlew classes --stacktrace
      - name: Run Unit Tests
        run: ./gradlew test --stacktrace
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: ./build/reports/tests/
      - name: Generate changelog
        if: env.OS == 'ubuntu-latest'
        env:
          CHANGELOG_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew generateChangelog --stacktrace
      - name: Assemble distribution
        if: env.OS == 'ubuntu-latest'
        run: ./gradlew assembleDist -x generateChangelog --stacktrace
      - name: Run FOSSA scan
        if: env.OS == 'ubuntu-latest'
        uses: fossa-contrib/fossa-action@v1
        with:
          fossa-api-key: ${{ secrets.FOSSA_API_KEY }}
      - name: Generate coverage report
        if: env.OS == 'ubuntu-latest'
        run: ./gradlew jacocoTestReport -x test --stacktrace
      - name: Upload coverage to Codecov
        if: env.OS == 'ubuntu-latest'
        uses: codecov/codecov-action@v1
        with:
          name: codecov-umbrella
          files: ./build/coverage.xml
          flags: unittests
          env_vars: OS
          verbose: true
